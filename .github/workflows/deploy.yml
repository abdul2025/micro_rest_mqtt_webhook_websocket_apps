name: Deploy Microservices

on:
  push:
    branches:
      - main

env:
  AWS_ACCOUNT_ID: "<your-aws-account-id>"
  AWS_REGION: "<your-aws-region>"
  ECR_REPOSITORIES: "rest-api-lambda websocket-lambda webhook-lambda mqtt-lambda"

jobs:
  build_and_push_images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build, tag, and push Docker images
        run: |
          for REPO in $ECR_REPOSITORIES; do
            echo "Building Docker image for: $REPO";
            docker build -t $REPO ./$REPO;

            echo "Tagging Docker image for: $REPO";
            docker tag $REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:latest;

            echo "Pushing Docker image to ECR for: $REPO";
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:latest;
          done

  deploy_cdk_stack:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy CDK stack
        run: cdk deploy --require-approval never